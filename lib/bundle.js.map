{"version":3,"sources":["webpack:///webpack/bootstrap bedc3c570241a27f7ffa","webpack:///./lib/trip_planner.js","webpack:///./lib/genetic_algorithm/sketch.js","webpack:///./lib/genetic_algorithm/population.js","webpack:///./lib/genetic_algorithm/DNA.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AChEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA,CAAC;;;;;;;;;ACvHD;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACzDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,OAAO,sBAAsB;AACpC;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA,iCAAiC,UAAU;AAC3C;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bedc3c570241a27f7ffa","import GA from './genetic_algorithm/sketch.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  const markers = [];\n  let destinations = [];\n  const tours = {};\n  let map;\n\n  //Google Map Set Up\n  function initMap() {\n    let bayArea = { lat: 37.475136, lng: -121.503748 };\n    map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 7,\n      center: bayArea\n    });\n\n    //Event Listener to place marks when user clicks on the map\n    map.addListener('click', e => {\n      placeMarker(e.latLng, map);\n      markers.push(e.latLng);\n    });\n  }\n  //Function to place marks on the map\n  function placeMarker(latLng, map) {\n    let marker = new google.maps.Marker({\n      position: latLng,\n      map: map\n    });\n  }\n\n  function getDuration(callback) {\n    let service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n      {\n        origins: markers,\n        destinations: markers,\n        travelMode: 'DRIVING',\n        avoidHighways: false,\n        avoidTolls: false\n      }, parseOutput);\n\n    function parseOutput(response, status) {\n      let error = false;\n      if (status == 'OK') {\n       let origins = response.originAddresses;\n       let dest = response.destinationAddresses;\n       for (let i = 0; i < origins.length; i++) {\n         let results = response.rows[i].elements;\n         let from = origins[i];\n         destinations.push(from);\n         tours[from] = {};\n         for (let j = 0; j < results.length; j++) {\n           if (i === j) { continue; }\n           let to = dest[j];\n           let element = results[j];\n           if (element.status === \"OK\") {\n             tours[from][to] = {};\n             tours[from][to][\"distance\"] = element.distance.value;\n             tours[from][to][\"duration\"] = element.duration.value;\n           } else {\n             alert(\"Invalid Location!\");\n             j = results.length;\n             i = origins.length;\n             error = true;\n           }\n         }\n       }\n       destinations.push(destinations[0]);\n       if (callback && !error) {\n         callback();\n       }\n      }\n    }\n  }\n\n  let button = document.createElement('button');\n  button.innerHTML = \"START\";\n  let body = document.getElementsByTagName('body')[0];\n  body.appendChild(button);\n\n  button.addEventListener('click', (e) => {\n    e.preventDefault();\n    getDuration(function() {\n      let ga = new GA(destinations, tours, 50);\n      ga.setup();\n      ga.draw((route) => {\n\n        let directionsService = new google.maps.DirectionsService();\n        let directionsDisplay = new google.maps.DirectionsRenderer();\n        directionsDisplay.setMap(map);\n        let waypts = [];\n        console.log(route);\n\n        for (let i = 0; i < route.genes.length - 1; i++) {\n          waypts.push({\n            location: route.genes[i],\n            stopover: true\n          });\n        }\n        let request = {\n          origin: route.genes[0],\n          destination: route.genes[0],\n          waypoints: waypts,\n          travelMode: 'DRIVING',\n          avoidHighways: false,\n          avoidTolls: false\n        };\n        console.log(request);\n        directionsService.route(request, function(response, status) {\n          if (status === google.maps.DirectionsStatus.OK) {\n            directionsDisplay.setDirections(response);\n          }\n        });\n      });\n    });\n  });\n\n  initMap();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/trip_planner.js\n// module id = 0\n// module chunks = 0","import Population from './population.js';\n\n// The Nature of Code\n// Daniel Shiffman\n// http://natureofcode.com\n\n// Genetic Algorithm, Evolving Shakespeare\n\n// Demonstration of using a genetic algorithm to perform a search\n\n// setup()\n//  # Step 1: The Population\n//    # Create an empty population (an array or ArrayList)\n//    # Fill it with DNA encoded objects (pick random values to start)\n\n// draw()\n//  # Step 1: Selection\n//    # Create an empty mating pool (an empty ArrayList)\n//    # For every member of the population, evaluate its fitness based on some criteria / function,\n//      and add it to the mating pool in a manner consistant with its fitness, i.e. the more fit it\n//      is the more times it appears in the mating pool, in order to be more likely picked for reproduction.\n\n//  # Step 2: Reproduction Create a new empty population\n//    # Fill the new population by executing the following steps:\n//       1. Pick two \"parent\" objects from the mating pool.\n//       2. Crossover -- create a \"child\" object by mating these two parents.\n//       3. Mutation -- mutate the child's DNA based on a given probability.\n//       4. Add the child object to the new population.\n//    # Replace the old population with the new population\n//\n//   # Rinse and repeat\n\nclass GeneticAlgorithm {\n  constructor(destinations, tours, maxGeneration = 50) {\n    this.destinations = destinations;\n    this.population;\n    this.tours = tours;\n    this.maxGeneration = maxGeneration;\n  }\n\n  setup() {\n    this.population = new Population(this.destinations, this.tours, 10);\n  }\n\n  draw(completedCallback) {\n    while ( this.population.generations < 50 ) {\n      this.population.calcFitness();\n      this.population.generate();\n    }\n    this.population.calcFitness();\n\n    if (completedCallback) {\n      completedCallback(this.population.getFittest());\n    }\n  }\n}\n\nexport default GeneticAlgorithm;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/genetic_algorithm/sketch.js\n// module id = 1\n// module chunks = 0","import DNA from './DNA.js';\n\nclass Population {\n  constructor(destinations, tours, popMax) {\n    this.population = [];\n    this.generations = 0;\n    this.mutateRate = 0.01;\n    this.tours = tours;\n    for (let i = 0; i < popMax; i++) {\n      this.population.push(new DNA(destinations));\n    }\n  }\n\n  //calculate fitness of each element in population\n  calcFitness() {\n    for (let i = 0; i < this.population.length; i++) {\n      this.population[i].calcFitness(this.tours);\n    }\n  }\n\n  acceptReject(maxFitness) {\n    let r = (Math.random() * maxFitness);\n    while (true) {\n      let index = Math.floor(Math.random() * this.population.length);\n      let partner  = this.population[index];\n      if (r < partner.fitness) {\n        return partner;\n      } else { r -= partner.fitness; }\n    }\n  }\n\n  generate() {\n    let maxFitness = 0;\n    for (let i = 0; i < this.population.length; i++) {\n      if (this.population[i].fitness > maxFitness) {\n        maxFitness = this.population[i].fitness;\n      }\n    }\n    let newPopulation = [];\n    for (let j = 0; j< this.population.length; j++) {\n      let partnerA = this.acceptReject(maxFitness);\n      let partnerB = this.acceptReject(maxFitness);\n      let child = partnerA.crossover(partnerB);\n      child.mutate(this.mutateRate);\n      newPopulation[j] = child;\n    }\n    this.population = newPopulation;\n    this.generations += 1;\n  }\n\n  getFittest() {\n    return this.population[this.getFittestIndex()];\n  }\n\n  getFittestIndex() {\n    let fittestIndex = 0;\n\n    for (let i = 0; i < this.population.length; i++) {\n      if (this.population[i].fitness > this.population[fittestIndex].fitness) {\n        fittestIndex = i;\n      }\n    }\n    return fittestIndex;\n  }\n}\n\nexport default Population;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/genetic_algorithm/population.js\n// module id = 2\n// module chunks = 0","Array.prototype.shuffle = function() {\n  let counter = this.length - 1;\n\n  // While there are elements in the array\n  while (counter > 1) {\n      // Pick a random index\n      let index = Math.floor(Math.random() * (this.length - 2) + 1);\n\n      // Decrease counter by 1\n      counter--;\n\n      // And swap the last element with it\n      [this[counter], this[index]] = [this[index], this[counter]];\n  }\n\n  return this;\n};\n\nclass DNA {\n  constructor(destinations, shuffle = true) {\n    this.genes = [];\n    this.fitness = 0;\n    this.duration = 0;\n    for (let i = 0; i < destinations.length; i++) {\n      this.genes.push(destinations[i]);\n    }\n    if (shuffle) {\n      this.genes.shuffle();\n    }\n  }\n\n  calcFitness(tours) {\n    this.fitness = 0;\n    this.calcDuration(tours);\n    this.fitness = 1 / this.duration;\n  }\n\n  calcDuration(tours) {\n    this.duration = 0;\n    for (let i = 0; i < this.genes.length - 1; i++) {\n      let from = this.genes[i];\n      let to = this.genes[i + 1];\n      if (tours[from][to] === undefined) {\n        alert(\"error! try again!\");\n        i = this.genes.length;\n      } else {\n        this.duration += parseInt(tours[from][to].duration);\n      }\n    }\n  }\n\n  setDNA(destinations) {\n    this.destinations = destinations;\n  }\n\n  crossover(partner) {\n    let child = [];\n    child[0] = this.genes[0];\n    child[this.genes.length - 1] = this.genes[this.genes.length - 1];\n    let startPos = Math.floor(Math.random() * (this.genes.length - 2) + 1);\n    let endPos = Math.floor(Math.random() * (this.genes.length - 2) + 1);\n\n    let i = startPos;\n\n    while (i != endPos) {\n      child[i] = this.genes[i];\n      i++;\n\n      if (i >= this.genes.length) {\n        i = 1;\n      }\n    }\n\n    for (let j = 1; j < partner.genes.length; j++) {\n      let gene = partner.genes[j];\n      if (child.includes(gene)) { continue; }\n      else {\n        for (let k = 0; k < this.genes.length; k++) {\n          if (child[k] === undefined) {\n            child[k] = gene;\n            break;\n          }\n        }\n      }\n    }\n    let dnaChild = new DNA(child, false);\n    return dnaChild;\n  }\n\n  mutate(mutationRate) {\n    for (let i = 1; i < this.genes.length - 1; i++) {\n      if (Math.random() < mutationRate) {\n        let randomIndex = Math.floor(Math.random() * (this.genes.length - 2) + 1);\n        let tempGene = this.genes[randomIndex];\n        this.genes[randomIndex] = this.genes[i];\n        this.genes[i] = tempGene;\n      }\n    }\n  }\n}\n\nexport default DNA;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/genetic_algorithm/DNA.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}